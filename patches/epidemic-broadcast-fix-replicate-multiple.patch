--- node_modules/epidemic-broadcast-trees/events.js~
+++ node_modules/epidemic-broadcast-trees/events.js
@@ -330,6 +330,7 @@ exports.notes = function (state, ev) {
     state = exports.peerClock(state, {id: ev.id, value: state.peers[ev.id].clock})
   }
 
+  var last = SSB.db.last.get()
   for(var id in clock) {
     count ++
 
@@ -383,7 +384,8 @@ exports.notes = function (state, ev) {
       //in the case we are already ahead, get ready to send them messages.
       rep.sent = seq
       if(lseq > seq) {
-        if(tx) peer.retrive.push(id)
+        // we can only send our own logs because we don't have full logs
+        if(tx && !last[id].partial) peer.retrive.push(id)
         else if(isReplicate) setNotes(peer, id, lseq, rep.rx)
       }
     }
--- node_modules/epidemic-broadcast-trees/stream.js~
+++ node_modules/epidemic-broadcast-trees/stream.js
@@ -11,6 +11,13 @@ function timestamp () {
   return Date.now()
 }
 
+function prettyPrintLogging(data) {
+  var d = Object.assign({}, data)
+  for (var id in d)
+    d[id] = { seq: v3.getSequence(d[id]), v3seq: d[id] }
+  return d
+}
+
 function EBTStream (peer, remote, version, client, onClose) {
   this.paused = true //start out paused
   this.remote = remote
@@ -36,11 +43,12 @@ EBTStream.prototype._validate = function (clock) {
 }
 
 EBTStream.prototype.write = function (data) {
-  if(this.peer.logging) console.error("EBT:recv", JSON.stringify(data, null, 2))
   if(this.ended) throw new Error('write after ebt stream ended:'+this.remote)
-  if(isMsg(data))
+  if(isMsg(data)) {
+    if(this.peer.logging) console.error("EBT:recv", JSON.stringify(data, null, 2))
     this.peer.state =
       events.receive(this.peer.state, {id: this.remote, value:data, ts: timestamp()})
+  }
   else {
     if(data.clock)
       data.clock = this._validate(data.clock)
@@ -53,6 +61,7 @@ EBTStream.prototype.write = function (data) {
         data[k] = v3.note(v2.getSequence(_data[k]), v2.getReceive(_data[k]))
       }
     }
+    if(this.peer.logging) console.error("EBT:recv", prettyPrintLogging(data), null, 2)
     this.peer.state =
       events.notes(this.peer.state, {id: this.remote, value: data, ts: timestamp()})
   }
@@ -96,7 +105,7 @@ EBTStream.prototype.resume = function () {
     if(state.blocked)
       this.end()
     else if(state.msgs.length) {
-      if(this.peer.logging) console.error("EBT:send", JSON.stringify(state.msgs[0], null, 2))
+      if(this.peer.logging) console.error("EBT:send 1", state.msgs[0], null, 2)
       this.sink.write(state.msgs.shift())
     }
     else {
@@ -110,7 +119,17 @@ EBTStream.prototype.resume = function () {
         notes = _notes
       }
 
-      if(this.peer.logging) console.error("EBT:send", notes)
+      // because we don't store full logs, we can't offer new messages other than our own
+      var last = SSB.db.last.get()
+      var theirClock = state.clock
+      var ourClock = this.peer.state.clock
+      for (var id in ourClock) {
+        if (last[id].partial && ourClock[id] > theirClock[id]) {
+          delete notes[id]
+        }
+      }
+
+      if(this.peer.logging) console.error("EBT:send 2", prettyPrintLogging(notes), null, 2)
       this.sink.write(notes)
     }
   }
