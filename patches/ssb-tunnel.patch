--- node_modules/ssb-tunnel/index.js~	1985-10-26 09:15:00.000000000 +0100
+++ node_modules/ssb-tunnel/index.js	2019-08-15 23:05:43.955331141 +0200
@@ -20,7 +20,7 @@
 function noop () { }
 
 exports.name = 'tunnel'
-exports.version = '1.0.0'
+exports.version = require('./package.json').version
 
 exports.manifest = {
   announce: 'sync',
@@ -53,7 +53,7 @@
         name: parts[0],
         portal: parts[1],
         target: parts[2],
-        port: +parts[3] || 0,
+        instance: +parts[3] || 0,
       }
     }
 
@@ -61,13 +61,14 @@
       opts.name === 'tunnel' &&
       isFeed(opts.portal) &&
       isFeed(opts.target) &&
-      Number.isInteger(opts.port)
+      Number.isInteger(opts.instance)
     )) return
 
     return opts
   }
 
   var handlers = {}
+  var setupRPC
 
   sbot.multiserver.transport({
     name: 'tunnel',
@@ -79,61 +80,7 @@
         name: 'tunnel',
         scope: function () { return config.scope },
         server: function (onConnect) {
-          //now we are definitely creating a server. check that portal is configured.
-          if(!portal) throw new Error('ssb-tunnel is configured, but a portal is missing')
-          //just remember the reference, call it
-          //when the tunnel api is called.
-          var _rpc
-          setImmediate(function again () {
-            //todo: put this inside the server creator?
-            //it would at least allow the tests to be fully ordered
-            var timer
-            function reconnect () {
-              if(sbot.closed) return
-              clearTimeout(timer)
-              timer = setTimeout(again, 1000*Math.random())
-            }
-            //this plugin might be enabled, but a portal might not be set.
-            if(!portal) {
-              reconnect()
-              return
-            }
-
-            log('tunnel:listen - connecting to portal:'+portal)
-            sbot.gossip.connect(portal, function (err, rpc) {
-              if(err) {
-                log('tunnel:listen - failed to connect to portal:'+portal+' '+err.message)
-                reconnect()
-                return
-              }
-              _rpc = rpc
-              rpc.tunnel.announce(null, function (err) {
-                if(err) {
-                  log('tunnel:listen - error during announcement at '+portal+' '+err.message)
-                  reconnect()
-                  return
-                }
-                //emit an event here?
-                log('tunnel:listen - SUCCESS establishing portal:'+portal)
-                sbot.emit('tunnel:listening', portal)
-              })
-              rpc.on('closed', function (err) {
-                _rpc = null
-                log('tunnel:listen - portal closed:'+portal, err)
-                sbot.emit('tunnel:closed')
-                reconnect()
-              })
-            })
-          })
-
-          handlers[instance] = function (stream, id) {
-            stream.address = 'tunnel:'+portal+':'+id
-            onConnect(stream)
-          }
-          //close server
-          return function () {
-            if(_rpc) _rpc.close()
-          }
+	  setupRPC = onConnect
         },
         client: function (addr, cb) {
           var opts = parse(addr)
@@ -145,7 +92,7 @@
             }
             else {
               log('tunnel:connect - portal connected, tunnel to target:'+opts.target)
-              cb(null, rpc.tunnel.connect({target: opts.target, port: opts.port}, noop))
+              cb(null, rpc.tunnel.connect({target: opts.target, instance: opts.instance, origin: sbot.id}, noop))
             }
           })
         },
@@ -158,7 +105,12 @@
     }
   })
 
+  var isConnOk = null
+  
   return {
+    setupIsConnectionOkHandler: function(connOk) {
+      isConnOk = connOk
+    },
     announce: function (opts) {
       log('tunnel:portal - received endpoint announcement from:'+this.id)
       endpoints[this.id] = sbot.peers[this.id][0]
@@ -173,10 +125,22 @@
         return endpoints[opts.target].tunnel.connect(opts, noop)
       }
       //if this connection is for us
-      else if(opts.target === sbot.id && handlers[opts.port]) {
-        var streams = DuplexPair()
-        handlers[opts.port](streams[0], this.id)
-        return streams[1]
+      else if(opts.target === sbot.id) {
+	function onOk() {
+          var streams = DuplexPair()
+          streams[0].address = 'tunnel:@'+SSB.remoteAddress.split(":")[3]+':'+opts.origin
+	  setupRPC(streams[0])
+          return streams[1]
+	}
+
+	if (isConnOk) {
+	  if (isConnOk(opts.origin))
+	    return onOk()
+	  else
+	    return ErrorDuplex('not allowed to connect')
+	}
+	else
+	  return onOk()
       }
       else
         return ErrorDuplex('could not connect to:'+opts.target)
